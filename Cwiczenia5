##################### ZADANIE 1 #####################

choice = 1
lista = []
while choice != 0:
    try:
        choice = int(input("Podaj liczbe calkowita dodatnia: "))
        if choice <= 0:
            raise ValueError
    except ValueError:
        print("Nie podawaj liczby slownie!")
        continue
    lista.append(choice)
    print(lista)

##################### ZADANIE 2 #####################

def czyWypozyczone(title = 'Potop',**kwargs):
    ''' Funkcja zwraca w postaci listy użytkowników (ID),
    którzy wypożyczyli 'Potop'.
    >>> czyWypozyczone(id1=['Potop', 'Pan Tadeusz'], id2=['Ferdydurke'])
    [id1]
    >>> czyWypozyczone(id1=['Potop', 'Pan Tadeusz'], id2=['Ferdydurke'], id3=['Zbrodnia i kara', 'Potop', 'Harry Potter'])
    [id1, id3]
    '''
    listaId = []
    for key, value in kwargs.items():
        if title in value:
            listaId.append(key)


    return listaId
    
print(czyWypozyczone(title = 'Zbrodnia i kara', id1=['Potop', 'Pan Tadeusz'], id2=['Ferdydurke','Zbrodnia i kara'], id3=['Zbrodnia i kara', 'Potop', 'Harry Potter']))

##################### REGEX #####################
##################### ZADANIE 6 #####################

s = "ATTTGgccTaC"
pattern = r'[a-z]'
only_uppercase = re.sub(pattern, '', s)
print(only_uppercase)

##################### ZADANIE 7 #####################

s2 = "ala ma kota: ala@interia.pl ola hahaha@wp.pl grzes nie ma pk81@gmail.com"
mails = re.findall(r'\w+@\w+\.\w+', s2, re.DOTALL)
print(mails)

##################### ZADANIE 8 #####################

L = ["Adam Nowak", "Kasia Klimczak", "Maria Rudzik"]

for name in L:
    my_regex = r"\s" + re.escape(name[0])
    print("TAK") if re.search(my_regex, name) else print("NIE")
#ale to miało zwracać imiona i nazwiska jeżeli zaczynają się od tej samej litery, a nie 'NIE', 'TAK'
